{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","Header","className","InputForm","state","userName","handleFormSubmit","e","a","preventDefault","get","resp","console","log","props","onsubmit","data","onSubmit","this","type","placeholder","value","onChange","setState","target","React","Component","Card","profile","profiles","src","avatar_url","name","public_repos","href","html_url","Cardlist","App","addProfile","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,6JCGrCC,G,YAAQC,EAAQ,KAQhBC,EAAS,WACb,OAAO,yBAAKC,UAAU,UAAf,0BAKHC,E,4MACJC,MAAQ,CAAEC,SAAU,I,EAEpBC,iB,uCAAmB,WAAOC,GAAP,eAAAC,EAAA,6DACjBD,EAAEE,iBADe,SAGEV,EAAMW,IAAN,uCAA0C,EAAKN,MAAMC,WAHvD,OAGXM,EAHW,OAIjBC,QAAQC,IAAI,EAAKT,MAAMC,UACvB,EAAKS,MAAMC,SAASJ,EAAKK,MALR,2C,6GAQT,IAAD,OACP,OAAO,yBAAKd,UAAU,QACpB,0BAAMe,SAAUC,KAAKZ,kBACnB,2BACEa,KAAK,OACLC,YAAY,qBACZC,MAAOH,KAAKd,MAAMC,SAClBiB,SAAU,SAAAf,GAAC,OAAI,EAAKgB,SAAS,CAAElB,SAAUE,EAAEiB,OAAOH,WAEpD,gD,GApBgBI,IAAMC,WA0BxBC,EAAO,SAACb,GACZ,OACE,6BACGA,EAAMc,QAAQC,UAAY,yBAAK3B,UAAU,QACxC,6BACE,yBAAKA,UAAU,cAAc4B,IAAKhB,EAAMc,QAAQC,SAASE,cAE3D,yBAAK7B,UAAU,QACb,oCAAUY,EAAMc,QAAQC,SAASG,MACjC,mDAAyBlB,EAAMc,QAAQC,SAASI,cAChD,gCAAQ,uBAAGC,KAAMpB,EAAMc,QAAQC,SAASM,UAAhC,kBAOZC,EAAW,SAACtB,GAChB,OAAO,6BACL,kBAAC,EAAD,CAAMc,QAASd,MA2BJuB,E,4MAtBbjC,MAAQ,CACNwB,QAAS,I,EAGXU,WAAa,SAACtB,GACZ,EAAKO,SAAS,CACZK,QAASZ,IAEXJ,QAAQC,IAAI,EAAKT,MAAMwB,U,uDAIvB,OACE,yBAAK1B,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWa,SAAUG,KAAKoB,aAC1B,kBAAC,EAAD,CAAUT,SAAUX,KAAKd,MAAMwB,e,GAjBrBH,IAAMC,WCtDJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.c35a2b19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst axios = require('axios');\n\nconst testData = [{\n  name: 'sumit',\n  imageUrl: 'someurl',\n  fullName: 'sumit banerjee'\n}]\n\nconst Header = () => {\n  return <div className=\"header\">\n    Github Profile Search\n  </div>\n}\n\nclass InputForm extends React.Component {\n  state = { userName: '' }\n\n  handleFormSubmit = async (e) => {\n    e.preventDefault();\n\n    const resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\n    console.log(this.state.userName)\n    this.props.onsubmit(resp.data)\n  }\n\n  render() {\n    return <div className=\"form\">\n      <form onSubmit={this.handleFormSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search github user\"\n          value={this.state.userName}\n          onChange={e => this.setState({ userName: e.target.value })}\n        />\n        <button>Search</button>\n      </form>\n    </div>\n  }\n}\n\nconst Card = (props) => {\n  return (\n    <div>\n      {props.profile.profiles && <div className=\"card\">\n        <div>\n          <img className=\"profile-pic\" src={props.profile.profiles.avatar_url} />\n        </div>\n        <div className=\"info\">\n          <p>Name: {props.profile.profiles.name}</p>\n          <p>Public Repositories: {props.profile.profiles.public_repos}</p>\n          <button><a href={props.profile.profiles.html_url}>Know More</a></button>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nconst Cardlist = (props) => {\n  return <div>\n    <Card profile={props} />\n  </div>\n}\n\nclass App extends React.Component {\n  state = {\n    profile: ''\n  }\n\n  addProfile = (data) => {\n    this.setState({\n      profile: data\n    })\n    console.log(this.state.profile)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <InputForm onsubmit={this.addProfile} />\n        <Cardlist profiles={this.state.profile} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}